import './index.scss';
import 'markdown-it-highlight/dist/index.css';
import 'highlight.js/styles/hybrid.css';
import hljs from 'highlight.js';
import {load} from './loaders/md-loader?folder=./guide!';
import StackBlitzSDK from '@stackblitz/sdk';
import sbIcon from './assets/stackblitz.svg';

// Import the LitElement base class and html tag function
import { LitElement, html } from 'lit-element';
import {unsafeHTML} from 'lit-html/directives/unsafe-html';
import {devDependencies, peerDependencies, name} from '../package.json';
import {version} from './version';

const deps = {
  ...devDependencies,
  ...peerDependencies,
  [name]: version  
};

let defs = new WeakMap();
let id = 0;

class Component extends LitElement {
  
  createRenderRoot() {
    return this;
  }

  static get properties() {
    return {
      chunk: String,
      code: String,
      name: String
    }
  }

  async firstUpdated() {
    if(!this.code) {
      if(!this.chunk) {
        throw new Error('doc-demo needs either chunk or code')
      }
      let {Comp,render,template,code,run} = await load(this.chunk);
      this.code = code;
      if(render) {
        Comp = class Auto extends LitElement {
          render() {
            return render();
          }
        }
      } else if(template) {
        Comp = class Auto extends LitElement {
          render() {
            return template;
          }
        }
      } else if(run) {
        Comp = class Auto extends LitElement {
          render() {
            return undefined
          }
          updated() {
            run(this.shadowRoot);
          }
        }
      }
      if(!defs.has(Comp)) {
        this.name = 'lit-transition-demo-'+(id++);
        customElements.define(this.name, Comp);
        defs.set(Comp, this.name);
      } else {
        this.name = defs.get(Comp);
      }
    }
  }

  render() {
    if(!this.code) return undefined;
    const h = hljs.highlight('javascript', this.code.trim(), true).value;
    const code = unsafeHTML(`<pre class="hljs"><code>${h}</code></pre>`);
    if(!this.name) {
      // just return highlighted ode
      return code;
    } else {
      return html`
      ${code}
      <h2>Result:
      <div @click=${() => stackBlitz(this.code)} stackblitz>
        ${sbIcon} run live on stackblitz!
      </div>
      </h2>
      <div class="result">
        ${unsafeHTML(`<${this.name}></${this.name}>`)}
      </div>
      `;
    }
  }
}

customElements.define('doc-demo', Component);

// opens example on stackblitz
function stackBlitz(code) {
  const tmpl = new RegExp('export const template =');
  const hasTemplate = code.match(tmpl);
  code = hasTemplate ? code.replace(tmpl, 'const template =') : code;
  const name = 'lit-transition-demo';
  const dependencies = {
    '@webcomponents/custom-elements': '*',
    ...(['lit-html','lit-element','lit-transition'].reduce((a,d) => ({
      ...a,
      [d]: deps[d]
    }), {}))
  };
  StackBlitzSDK.openProject({
    files: {
      'index.js': `// auto-generated by lit-transition doc
${code}
${!hasTemplate ? `customElements.define('${name}', Comp)` : `
import { render } from 'lit-html';
render(template, document.querySelector('#demo'));`
}`,
      'index.html': `<!doctype html>
<html>
<head>
  <script src="/node_modules/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js"></script>
  <script src="/node_modules/@webcomponents/webcomponentsjs/webcomponents-bundle.js"></script>
  <title>LitElement Example</title>
</head>
<body style="overflow: hidden">
  ${!hasTemplate ? `<${name}></${name}>` : '<div id="demo"></div>'}
</body>
</html>` 
    },
    title: 'lit-transition example',
    description: 'try out lit-trnsition',
    template: 'javascript',
    dependencies,
    settings: {
      compile: {
        trigger: 'save',
        action: 'refresh'
      }
    }
  })
}